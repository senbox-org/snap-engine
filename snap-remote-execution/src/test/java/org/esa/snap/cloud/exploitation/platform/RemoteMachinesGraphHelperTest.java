package org.esa.snap.cloud.exploitation.platform;

import org.apache.commons.lang.SystemUtils;
import org.esa.snap.remote.execution.exceptions.OperatorInitializeException;
import org.esa.snap.remote.execution.file.system.ILocalMachineFileSystem;
import org.esa.snap.remote.execution.file.system.LinuxLocalMachineFileSystem;
import org.esa.snap.remote.execution.file.system.MacLocalMachineFileSystem;
import org.esa.snap.remote.execution.file.system.WindowsLocalMachineFileSystem;
import org.esa.snap.remote.execution.file.system.IRemoteMachineFileSystem;
import org.esa.snap.remote.execution.machines.executors.RemoteMachineExecutorInputData;
import org.esa.snap.remote.execution.machines.executors.RemoteMachinesGraphHelper;
import org.esa.snap.remote.execution.machines.executors.SlaveProductsInputData;
import org.esa.snap.remote.execution.machines.RemoteMachineProperties;
import org.esa.snap.core.gpf.graph.GraphException;
import org.esa.snap.engine_utilities.util.FileIOUtils;
import org.junit.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

/**
 * Created by jcoravu on 15/3/2019.
 */
public class RemoteMachinesGraphHelperTest extends AbstractTest {

    public RemoteMachinesGraphHelperTest() {
    }

    @Test
    public void testData() throws IOException, GraphException {
        String temporaryFolderPath = System.getProperty("java.io.tmpdir");
        Path localOutputFolder = Paths.get(temporaryFolderPath, "slave-output");
        try {
            if (!Files.exists(localOutputFolder)) {
                Files.createDirectory(localOutputFolder);
            }

            ILocalMachineFileSystem localMachineFileSystem;
            if (SystemUtils.IS_OS_WINDOWS) {
                localMachineFileSystem = new WindowsLocalMachineFileSystem();
            } else if (SystemUtils.IS_OS_MAC) {
                localMachineFileSystem = new MacLocalMachineFileSystem();
            } else if (SystemUtils.IS_OS_LINUX) {
                localMachineFileSystem = new LinuxLocalMachineFileSystem();
            } else {
                throw new OperatorInitializeException("Unsupported operating system '" + SystemUtils.OS_NAME + "'.");
            }

            Path slaveGraphFile = this.cloudExploitationPlatformTestsFolderPath.resolve("slave-graph.xml");
            if (!Files.exists(slaveGraphFile)) {
                fail("The slave graph file " + slaveGraphFile.toString()+ " does not exist.");
            }

            String[] relativeSourceProductFilePaths = new String[] { "3_8bit_components_srgb.tif", "S2AGRI_L3A_PVI_V20160930.jpg" };
            String slaveProductsFolderNamePrefix = "output";
            String slaveProductsName = "remote-product.dim";
            String slaveProductsFormatName = "BEAM-DIMAP";
            SlaveProductsInputData localSharedFolder = new SlaveProductsInputData(localOutputFolder, slaveProductsFolderNamePrefix, slaveProductsName, slaveProductsFormatName);

            RemoteMachinesGraphHelper remoteMachinesGraphHelper = new RemoteMachinesGraphHelper(localMachineFileSystem, localSharedFolder, relativeSourceProductFilePaths, slaveGraphFile, false);

            RemoteMachineProperties remoteMachine = new RemoteMachineProperties();
            remoteMachine.setHostName("127.0.0.1");
            remoteMachine.setPortNumber(123);
            remoteMachine.setUsername("username");
            remoteMachine.setPassword("password");
            remoteMachine.setOperatingSystemName("Linux");
            remoteMachine.setSharedFolderPath("/home/username/remote-shared");
            remoteMachine.setGPTFilePath(null);

            IRemoteMachineFileSystem remoteMachineFileSystem = new IRemoteMachineFileSystem() {
                @Override
                public String normalizeFileSeparator(String path) {
                    return path.replace('\\', '/');
                }

                @Override
                public char getFileSeparatorChar() {
                    return '/';
                }
            };

            // create the slave graph for the first source product
            RemoteMachineExecutorInputData result = remoteMachinesGraphHelper.computeNextGraphToRun(remoteMachine, remoteMachineFileSystem);
            assertNotNull(result);

            assertEquals("slave-output/output-1/slave-graph.xml", result.getGraphRelativeFilePath());
            Path remoteMachineSlaveGraphFile = localOutputFolder.getParent().resolve(result.getGraphRelativeFilePath());
            if (!Files.exists(remoteMachineSlaveGraphFile)) {
                fail("The remote machine slave graph file "+ remoteMachineSlaveGraphFile.toString()+" does not exist.");
            }

            assertEquals("slave-output/output-1/remote-product.dim", result.getOutputProductRelativeFilePath());

            String[] graphRelativeSourceProductFilePaths = result.getGraphRelativeSourceProductFilePaths();
            assertNotNull(graphRelativeSourceProductFilePaths);
            assertEquals(1, graphRelativeSourceProductFilePaths.length);
            assertEquals("3_8bit_components_srgb.tif", graphRelativeSourceProductFilePaths[0]);

            // consider that the source product is unprocessed
            remoteMachinesGraphHelper.addUnprocessedGraphSourceProducts(remoteMachine, result);

            // create the slave graph for the second source product
            result = remoteMachinesGraphHelper.computeNextGraphToRun(remoteMachine, remoteMachineFileSystem);
            assertNotNull(result);

            assertEquals("slave-output/output-2/slave-graph.xml", result.getGraphRelativeFilePath());
            remoteMachineSlaveGraphFile = localOutputFolder.getParent().resolve(result.getGraphRelativeFilePath());
            if (!Files.exists(remoteMachineSlaveGraphFile)) {
                fail("The remote machine slave graph file " + remoteMachineSlaveGraphFile.toString() + " does not exist.");
            }

            assertEquals("slave-output/output-2/remote-product.dim", result.getOutputProductRelativeFilePath());

            graphRelativeSourceProductFilePaths = result.getGraphRelativeSourceProductFilePaths();
            assertNotNull(graphRelativeSourceProductFilePaths);
            assertEquals(1, graphRelativeSourceProductFilePaths.length);
            assertEquals("S2AGRI_L3A_PVI_V20160930.jpg", graphRelativeSourceProductFilePaths[0]);

            // consider that the source product is unprocessed
            remoteMachinesGraphHelper.addUnprocessedGraphSourceProducts(remoteMachine, result);

            boolean canContinue = remoteMachinesGraphHelper.canContinueIfExceptionOccurredOnRemoteMachines();
            assertEquals(true, canContinue);

            // no graph can be processed by the same remote machine
            result = remoteMachinesGraphHelper.computeNextGraphToRun(remoteMachine, remoteMachineFileSystem);
            assertNull(result);

            remoteMachinesGraphHelper.setExceptionOccurredOnRemoteMachine(new Exception());
            canContinue = remoteMachinesGraphHelper.canContinueIfExceptionOccurredOnRemoteMachines();
            assertEquals(false, canContinue);
        } finally {
            if (Files.exists(localOutputFolder)) {
                FileIOUtils.deleteFolder(localOutputFolder);
            }
        }
    }
}
